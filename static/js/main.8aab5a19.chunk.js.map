{"version":3,"sources":["config.js","Map/index.js","weatherService.js","App.js","serviceWorker.js","index.js"],"names":["config","MapWrapper","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","position","onClick","weatherDescription","_this$props$layers","layers","react_default","a","createElement","Map","center","zoom","TileLayer","url","attribution","map","layer","concat","Marker","Popup","React","Component","temperatureConverter","kelvin","Error","parseInt","fetchWeather","_ref","asyncToGenerator","regenerator_default","mark","_callee","lat","lng","response","weatherData","currentTemp","_weatherData$weather$","description","icon","cityName","pressure","humidity","windDeg","windSpeed","wrap","_context","prev","next","axios","get","sent","data","console","log","main","temp","weather","name","wind","deg","speed","abrupt","temperature","currentElementDetails","t0","stop","_x","_x2","fetchWeatherByCountry","_ref2","_callee2","country","city","_weatherData$weather$2","coord","_args2","_context2","length","undefined","iconUrl","id","App","_this","call","onMapClick","_ref$latlng","latlng","then","res","arrUpdated","getUpdatedArray","setState","objectSpread","arrWeatherData","isChecked","state","includes","onCheckboxClick","_ref3","target","prevState","filter","toConsumableArray","onChangeCountry","e","inputUserCountry","onChangeCity","inputUserCity","searchByPlace","newArray","push","_this2","_this$state$position","slicedToArray","_this$state","rowTables","index","data-title","alt","className","src","Map_MapWrapper","App_Checkbox","label","onChange","required","scope","Checkbox","_ref4","type","checked","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAAeA,SACL,oECGGC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WACW,IAAAC,EACwDT,KAAKU,MAA5DC,EADDF,EACCE,SAAUC,EADXH,EACWG,QAASC,EADpBJ,EACoBI,mBADpBC,EAAAL,EACwCM,cADxC,IAAAD,EACiD,GADjDA,EAEP,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,OAAQT,EAAUU,KAAM,GAAIT,QAASA,GACxCI,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEbT,EAAOU,IAAI,SAAAC,GAAK,OACfV,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEf,IAAKmB,EACLF,YAAY,0EACZD,IAAG,uCAAAI,OAAyCD,EAAzC,2BAAAC,OACDhC,OAKNqB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQjB,SAAUA,GAChBK,EAAAC,EAAAC,cAACW,EAAA,EAAD,KAAQhB,SApBlBjB,EAAA,CAAgCkC,IAAMC,4BCDhCC,EAAuB,SAAAC,GAC3B,GAAIA,EAAS,EACX,MAAM,IAAIC,MAAM,6BAEhB,OAAOC,SAASF,EAAS,SAIhBG,EAAY,eAAAC,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAAtB,EAAAuB,KAAG,SAAAC,EAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAf,EAAAtB,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEDC,IAAMC,IAAN,uDAAAjC,OACkCe,EADlC,SAAAf,OAC6CgB,EAD7C,WAAAhB,OAEnBhC,IAJoB,cAElBiD,EAFkBY,EAAAK,KAOlBhB,EAAcD,EAASkB,KAC7BC,QAAQC,IAAInB,GACNC,EAAcd,EAAqBa,EAAYoB,KAAKC,MATlCnB,EAUMF,EAAYsB,QAAQ,GAA1CnB,EAVgBD,EAUhBC,YAAaC,EAVGF,EAUHE,KACfC,EAAWL,EAAYuB,KACvBjB,EAAWN,EAAYoB,KAAKd,SAC5BC,EAAWP,EAAYoB,KAAKb,SAC5BC,EAAUR,EAAYwB,KAAKC,IAC3BhB,EAAYT,EAAYwB,KAAKE,MAfXf,EAAAgB,OAAA,SAgBjB,CACLC,YAAa3B,EACbG,OACAD,cACAE,WACAwB,sBAAuB,CACrBxB,WACAJ,cACAG,OACAD,cACAG,WACAC,WACAC,UACAC,eA7BoB,QAAAE,EAAAC,KAAA,GAAAD,EAAAmB,GAAAnB,EAAA,SAiCxBO,QAAQC,IAARR,EAAAmB,IAjCwB,yBAAAnB,EAAAoB,SAAAnC,EAAAzC,KAAA,aAAH,gBAAA6E,EAAAC,GAAA,OAAAzC,EAAAlC,MAAAH,KAAAI,YAAA,GAqCZ2E,EAAqB,eAAAC,EAAAlF,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAAtB,EAAAuB,KAAG,SAAAyC,IAAA,IAAAC,EAAAC,EAAAvC,EAAAC,EAAAC,EAAAsC,EAAApC,EAAAC,EAAAC,EAAAmC,EAAAlC,EAAAC,EAAAkC,EAAAlF,UAAA,OAAAmC,EAAAtB,EAAAsC,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cAAOwB,EAAPI,EAAAE,OAAA,QAAAC,IAAAH,EAAA,GAAAA,EAAA,GAAiB,GAAIH,EAArBG,EAAAE,OAAA,QAAAC,IAAAH,EAAA,GAAAA,EAAA,GAA4B,GAA5BC,EAAA9B,KAAA,EAAA8B,EAAA7B,KAAA,EAEVC,IAAMC,IAAN,qDAAAjC,OACgCwD,EADhC,KAAAxD,OACwCuD,EADxC,WAAAvD,OAEnBhC,IAJ6B,cAE3BiD,EAF2B2C,EAAA1B,KAO3BhB,EAAcD,EAASkB,KACvBhB,EAAcd,EAAqBa,EAAYoB,KAAKC,MARzBkB,EASHvC,EAAYsB,QAAQ,GAA1CnB,EATyBoC,EASzBpC,YAAaC,EATYmC,EASZnC,KACfC,EAAWL,EAAYuB,KACvBiB,EAAQxC,EAAYwC,MACpBlC,EAAWN,EAAYoB,KAAKd,SAC5BC,EAAWP,EAAYoB,KAAKb,SAbDmC,EAAAf,OAAA,SAc1B,CACLC,YAAa3B,EACbG,OACAD,cACArC,SAAU0E,EACVnC,WACAwB,sBAAuB,CACrBxB,WACAJ,cACAG,OACAD,cACAG,WACAC,cA1B6B,QAAAmC,EAAA9B,KAAA,GAAA8B,EAAAZ,GAAAY,EAAA,SA8BjCxB,QAAQC,IAARuB,EAAAZ,IA9BiC,yBAAAY,EAAAX,SAAAK,EAAAjF,KAAA,aAAH,yBAAAgF,EAAA7E,MAAAH,KAAAI,YAAA,GC3C5BsF,EAAU,SAAAC,GAAE,yCAAAhE,OAAuCgE,EAAvC,SACZC,cACJ,SAAAA,EAAYlF,GAAO,IAAAmF,EAAA,OAAA/F,OAAAC,EAAA,EAAAD,CAAAE,KAAA4F,IACjBC,EAAA/F,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8F,GAAAE,KAAA9F,KAAMU,KAwBRqF,WAzBmB,eAAAf,EAAAlF,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAAtB,EAAAuB,KAyBN,SAAAC,EAAAJ,GAAA,IAAA2D,EAAAtD,EAAAC,EAAA,OAAAJ,EAAAtB,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAAsC,EAAA3D,EAAS4D,OAAUvD,EAAnBsD,EAAmBtD,IAAKC,EAAxBqD,EAAwBrD,IACnCP,EAAaM,EAAKC,GAAKuD,KAAK,SAAAC,GAC1B,GAAIA,EAAK,CACP,IAAMC,EAAaP,EAAKQ,gBAAgBF,EAAIzB,uBAC5CmB,EAAKS,SAALxG,OAAAyG,EAAA,EAAAzG,CAAA,GAAmBqG,EAAnB,CAAwBK,eAAgBJ,QAG5CP,EAAKS,SAAS,CAAE3F,SAAU,CAAC+B,EAAKC,KAPrB,wBAAAa,EAAAoB,SAAAnC,EAAAzC,SAzBM,gBAAA6E,GAAA,OAAAG,EAAA7E,MAAAH,KAAAI,YAAA,GAAAyF,EAmCnBY,UAAY,SAAA/E,GAAK,OAAImE,EAAKa,MAAM3F,OAAO4F,SAASjF,IAnC7BmE,EAqCnBe,gBAAkB,SAAAC,GAA2B,IAAdrG,EAAcqG,EAAxBC,OAAUtG,MAC7BuD,QAAQC,IAAIxD,GACRqF,EAAKY,UAAUjG,GACjBqF,EAAKS,SAAS,SAAAS,GAAS,MAAK,CAC1BhG,OAAQgG,EAAUhG,OAAOiG,OAAO,SAAAtF,GAAK,OAAIA,IAAUlB,OAGrDqF,EAAKS,SAAS,SAAAS,GAAS,MAAK,CAAEhG,OAAM,GAAAY,OAAA7B,OAAAmH,EAAA,EAAAnH,CAAMiH,EAAUhG,QAAhB,CAAwBP,QA5C7CqF,EAgDnBqB,gBAAkB,SAAAC,GAChBtB,EAAKS,SAAS,CAAEc,iBAAkBD,EAAEL,OAAOtG,QAC3CuD,QAAQC,IAAI6B,EAAKa,MAAMU,mBAlDNvB,EAoDnBwB,aAAe,SAAAF,GACbtB,EAAKS,SAAS,CAAEgB,cAAeH,EAAEL,OAAOtG,QACxCuD,QAAQC,IAAI6B,EAAKa,MAAMY,gBAtDNzB,EAyDnB0B,cAAgB,WACdxC,EACEc,EAAKa,MAAMU,iBACXvB,EAAKa,MAAMY,eACXpB,KAAK,SAAAC,GACL,GAAIA,EAAK,CACP,IAAMC,EAAaP,EAAKQ,gBAAgBF,EAAIzB,uBAC5CmB,EAAKS,SAALxG,OAAAyG,EAAA,EAAAzG,CAAA,GACKqG,EADL,CAEEiB,iBAAkB,GAClBE,cAAe,GACfd,eAAgBJ,UAGlBP,EAAKS,SAAS,CAAEc,iBAAkB,GAAIE,cAAe,QAvExCzB,EA4EnBQ,gBAAkB,SAAAvC,GAChB,IAAM0D,EAAW3B,EAAKa,MAAMF,eAE5B,OADAgB,EAASC,KAAK3D,GACP0D,GA7EP3B,EAAKa,MAAQ,CACX/F,SAAU,CAAC,QAAS,SACpBuC,SAAU,GACVD,KAAM,GACND,YAAa,GACbyB,YAAa,EACb1D,OAAQ,GACRqG,iBAAkB,GAClBE,cAAe,GACfd,eAAgB,IAXDX,mFAeC,IAAA6B,EAAA1H,KAAA2H,EAAA7H,OAAA8H,EAAA,EAAA9H,CACCE,KAAK0G,MAAM/F,SADZ,GACX+B,EADWiF,EAAA,GACNhF,EADMgF,EAAA,GAElBvF,EAAaM,EAAKC,GAAKuD,KAAK,SAAAC,GAC1B,GAAIA,EAAK,CACP,IAAMC,EAAasB,EAAKrB,gBAAgBF,EAAIzB,uBAC5CgD,EAAKpB,SAALxG,OAAAyG,EAAA,EAAAzG,CAAA,GAAmBqG,EAAnB,CAAwBK,eAAgBJ,yCA8DrC,IAAAyB,EASH7H,KAAK0G,MAPP/F,EAFKkH,EAELlH,SACAqC,EAHK6E,EAGL7E,YACAC,EAJK4E,EAIL5E,KACAwB,EALKoD,EAKLpD,YACAvB,EANK2E,EAML3E,SACAnC,EAPK8G,EAOL9G,OAII+G,EAXCD,EAQLrB,eAG+B/E,IAAI,SAAC0C,EAAS4D,GAC7C,OACE/G,EAAAC,EAAAC,cAAA,MAAIX,IAAKwH,GACP/G,EAAAC,EAAAC,cAAA,MAAI8G,aAAW,aAAa7D,EAAQjB,UACpClC,EAAAC,EAAAC,cAAA,MAAI8G,aAAW,UAAU7D,EAAQrB,YAAjC,QACA9B,EAAAC,EAAAC,cAAA,MAAI8G,aAAW,QAEXhH,EAAAC,EAAAC,cAAA,OACE+G,IAAG,GAAAtG,OAAKqB,EAAL,SACHkF,UAAW,YACXC,IAAKzC,EAAQvB,EAAQlB,SAI3BjC,EAAAC,EAAAC,cAAA,MAAI8G,aAAW,eAAe7D,EAAQnB,aACtChC,EAAAC,EAAAC,cAAA,MAAI8G,aAAW,YAAY7D,EAAQf,UACnCpC,EAAAC,EAAAC,cAAA,MAAI8G,aAAW,YAAY7D,EAAQhB,UACnCnC,EAAAC,EAAAC,cAAA,MAAI8G,aAAW,eAAe7D,EAAQd,SACtCrC,EAAAC,EAAAC,cAAA,MAAI8G,aAAW,cAAc7D,EAAQb,cAK3C,OACEtC,EAAAC,EAAAC,cAAA,OAAKgH,UAAU,OACblH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,8BAEFF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKgH,UAAW,sBACdlH,EAAAC,EAAAC,cAACkH,EAAD,CACEzH,SAAUA,EACVC,QAASZ,KAAK+F,WACdlF,mBAAoBmC,EACpBjC,OAAQA,KAGZC,EAAAC,EAAAC,cAAA,WAASgH,UAAW,gBAClBlH,EAAAC,EAAAC,cAAA,WAASgH,UAAW,4BAClBlH,EAAAC,EAAAC,cAAA,OACE+G,IAAG,GAAAtG,OAAKqB,EAAL,SACHkF,UAAW,OACXC,IAAKzC,EAAQzC,KAEfjC,EAAAC,EAAAC,cAAA,aAAAS,OAAQuB,IACRlC,EAAAC,EAAAC,cAAA,YAAAS,OAAOqB,IACPhC,EAAAC,EAAAC,cAAA,YAAAS,OAAO8C,GAAP,mBAEFzD,EAAAC,EAAAC,cAAA,WAASgH,UAAW,iCAClBlH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,OAAKgH,UAAW,kBACdlH,EAAAC,EAAAC,cAAA,WAASgH,UAAW,kBAClBlH,EAAAC,EAAAC,cAACmH,EAAD,CACEC,MAAO,oBACP9H,MAAO,WACPI,QAASZ,KAAK4G,gBACdH,UAAWzG,KAAKyG,UAAU,cAE5BzF,EAAAC,EAAAC,cAACmH,EAAD,CACEC,MAAO,sBACP9H,MAAO,oBACPI,QAASZ,KAAK4G,gBACdH,UAAWzG,KAAKyG,UAAU,uBAE5BzF,EAAAC,EAAAC,cAACmH,EAAD,CACEC,MAAO,aACP9H,MAAO,WACPI,QAASZ,KAAK4G,gBACdH,UAAWzG,KAAKyG,UAAU,eAG9BzF,EAAAC,EAAAC,cAAA,WAASgH,UAAW,kBAClBlH,EAAAC,EAAAC,cAACmH,EAAD,CACEC,MAAO,qBACP9H,MAAO,eACPI,QAASZ,KAAK4G,gBACdH,UAAWzG,KAAKyG,UAAU,kBAE5BzF,EAAAC,EAAAC,cAACmH,EAAD,CACEC,MAAO,eACP9H,MAAO,aACPI,QAASZ,KAAK4G,gBACdH,UAAWzG,KAAKyG,UAAU,mBAKlCzF,EAAAC,EAAAC,cAAA,WAASgH,UAAW,+BAClBlH,EAAAC,EAAAC,cAAA,OAAKgH,UAAW,cACdlH,EAAAC,EAAAC,cAAA,QAAMgH,UAAU,aAAhB,YACAlH,EAAAC,EAAAC,cAAA,SACEV,MAAOR,KAAK0G,MAAMU,iBAClBmB,SAAUvI,KAAKkH,gBACfgB,UAAU,QACVvC,GAAI,iBAEN3E,EAAAC,EAAAC,cAAA,QAAMgH,UAAU,aAAhB,SACAlH,EAAAC,EAAAC,cAAA,SACEV,MAAOR,KAAK0G,MAAMY,cAClBkB,UAAU,EACVD,SAAUvI,KAAKqH,aACfa,UAAU,QACVvC,GAAI,cAEN3E,EAAAC,EAAAC,cAAA,UAAQgH,UAAU,MAAMtH,QAASZ,KAAKuH,eAAtC,aAMNvG,EAAAC,EAAAC,cAAA,OAAKgH,UAAW,mBACdlH,EAAAC,EAAAC,cAAA,SAAOgH,UAAU,oBACflH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIuH,MAAM,OAAV,aACAzH,EAAAC,EAAAC,cAAA,MAAIuH,MAAM,OAAV,UACAzH,EAAAC,EAAAC,cAAA,MAAIuH,MAAM,OAAV,QACAzH,EAAAC,EAAAC,cAAA,MAAIuH,MAAM,OAAV,eACAzH,EAAAC,EAAAC,cAAA,MAAIuH,MAAM,OAAV,YACAzH,EAAAC,EAAAC,cAAA,MAAIuH,MAAM,OAAV,YACAzH,EAAAC,EAAAC,cAAA,MAAIuH,MAAM,OAAV,eACAzH,EAAAC,EAAAC,cAAA,MAAIuH,MAAM,OAAV,gBAGJzH,EAAAC,EAAAC,cAAA,aAAQ4G,cA1NJ/F,aAmOZ2G,EAAW,SAAAC,GAAA,IAAGlC,EAAHkC,EAAGlC,UAAW7F,EAAd+H,EAAc/H,QAASJ,EAAvBmI,EAAuBnI,MAAO8H,EAA9BK,EAA8BL,MAA9B,OACftH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SACEN,QAASA,EACTgI,KAAK,WACLpI,MAAOA,EACPqI,QAASpC,IACR,IACF6B,IAIU1C,ICzOKkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpI,EAAAC,EAAAC,cAACmI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.8aab5a19.chunk.js","sourcesContent":["export default {\n  apiKey: '2da54c7d14778f06f7bad485bfdf0c3d',\n};\n","import React from 'react';\nimport config from '../config';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\n\nexport class MapWrapper extends React.Component {\n  render() {\n    const { position, onClick, weatherDescription, layers = [] } = this.props;\n    return (\n      <Map center={position} zoom={11} onClick={onClick}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {layers.map(layer => (\n          <TileLayer\n            key={layer}\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url={`https://tile.openweathermap.org/map/${layer}/{z}/{x}/{y}.png?appid=${\n              config.apiKey\n            }`}\n          />\n        ))}\n\n        <Marker position={position}>\n          <Popup>{weatherDescription}</Popup>\n        </Marker>\n      </Map>\n    );\n  }\n}\n","import axios from 'axios';\nimport config from './config';\n\nconst temperatureConverter = kelvin => {\n  if (kelvin < 0) {\n    throw new Error('below absolute zero (0 K)');\n  } else {\n    return parseInt(kelvin - 273.15);\n  }\n};\n\nexport const fetchWeather = async (lat, lng) => {\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&APPID=${\n        config.apiKey\n      }`\n    );\n    const weatherData = response.data;\n    console.log(weatherData);\n    const currentTemp = temperatureConverter(weatherData.main.temp);\n    const { description, icon } = weatherData.weather[0];\n    const cityName = weatherData.name;\n    const pressure = weatherData.main.pressure;\n    const humidity = weatherData.main.humidity;\n    const windDeg = weatherData.wind.deg;\n    const windSpeed = weatherData.wind.speed;\n    return {\n      temperature: currentTemp,\n      icon,\n      description,\n      cityName,\n      currentElementDetails: {\n        cityName,\n        currentTemp,\n        icon,\n        description,\n        pressure,\n        humidity,\n        windDeg,\n        windSpeed,\n      },\n    };\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchWeatherByCountry = async (country = '', city = '') => {\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${\n        config.apiKey\n      }`\n    );\n    const weatherData = response.data;\n    const currentTemp = temperatureConverter(weatherData.main.temp);\n    const { description, icon } = weatherData.weather[0];\n    const cityName = weatherData.name;\n    const coord = weatherData.coord;\n    const pressure = weatherData.main.pressure;\n    const humidity = weatherData.main.humidity;\n    return {\n      temperature: currentTemp,\n      icon,\n      description,\n      position: coord,\n      cityName,\n      currentElementDetails: {\n        cityName,\n        currentTemp,\n        icon,\n        description,\n        pressure,\n        humidity,\n      },\n    };\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { MapWrapper } from './Map';\nimport { fetchWeather, fetchWeatherByCountry } from './weatherService';\n\nconst iconUrl = id => `http://openweathermap.org/img/w/${id}.png`;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      position: [32.0853, 34.7818],\n      cityName: '',\n      icon: '',\n      description: '',\n      temperature: 0,\n      layers: [],\n      inputUserCountry: '',\n      inputUserCity: '',\n      arrWeatherData: [],\n    };\n  }\n\n  componentDidMount() {\n    const [lat, lng] = this.state.position;\n    fetchWeather(lat, lng).then(res => {\n      if (res) {\n        const arrUpdated = this.getUpdatedArray(res.currentElementDetails);\n        this.setState({ ...res, arrWeatherData: arrUpdated });\n      }\n    });\n  }\n\n  onMapClick = async ({ latlng: { lat, lng } }) => {\n    fetchWeather(lat, lng).then(res => {\n      if (res) {\n        const arrUpdated = this.getUpdatedArray(res.currentElementDetails);\n        this.setState({ ...res, arrWeatherData: arrUpdated });\n      }\n    });\n    this.setState({ position: [lat, lng] });\n  };\n\n  isChecked = layer => this.state.layers.includes(layer);\n\n  onCheckboxClick = ({ target: { value } }) => {\n    console.log(value);\n    if (this.isChecked(value)) {\n      this.setState(prevState => ({\n        layers: prevState.layers.filter(layer => layer !== value),\n      }));\n    } else {\n      this.setState(prevState => ({ layers: [...prevState.layers, value] }));\n    }\n  };\n\n  onChangeCountry = e => {\n    this.setState({ inputUserCountry: e.target.value });\n    console.log(this.state.inputUserCountry);\n  };\n  onChangeCity = e => {\n    this.setState({ inputUserCity: e.target.value });\n    console.log(this.state.inputUserCity);\n  };\n\n  searchByPlace = () => {\n    fetchWeatherByCountry(\n      this.state.inputUserCountry,\n      this.state.inputUserCity\n    ).then(res => {\n      if (res) {\n        const arrUpdated = this.getUpdatedArray(res.currentElementDetails);\n        this.setState({\n          ...res,\n          inputUserCountry: '',\n          inputUserCity: '',\n          arrWeatherData: arrUpdated,\n        });\n      } else {\n        this.setState({ inputUserCountry: '', inputUserCity: '' });\n      }\n    });\n  };\n\n  getUpdatedArray = data => {\n    const newArray = this.state.arrWeatherData;\n    newArray.push(data);\n    return newArray;\n  };\n\n  render() {\n    const {\n      position,\n      description,\n      icon,\n      temperature,\n      cityName,\n      layers,\n      arrWeatherData,\n    } = this.state;\n\n    const rowTables = arrWeatherData.map((weather, index) => {\n      return (\n        <tr key={index}>\n          <td data-title=\"City Name\">{weather.cityName}</td>\n          <td data-title=\"Degree\">{weather.currentTemp}&deg;</td>\n          <td data-title=\"Icon\">\n            {\n              <img\n                alt={`${description} icon`}\n                className={'iconSmall'}\n                src={iconUrl(weather.icon)}\n              />\n            }\n          </td>\n          <td data-title=\"Description\">{weather.description}</td>\n          <td data-title=\"Humidity\">{weather.humidity}</td>\n          <td data-title=\"Pressure\">{weather.pressure}</td>\n          <td data-title=\"Wind Degree\">{weather.windDeg}</td>\n          <td data-title=\"Wind Speed\">{weather.windSpeed}</td>\n        </tr>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Geo weather app</h1>\n        </header>\n        <main>\n          <div className={'map-wrapper border'}>\n            <MapWrapper\n              position={position}\n              onClick={this.onMapClick}\n              weatherDescription={description}\n              layers={layers}\n            />\n          </div>\n          <section className={'action-panel'}>\n            <section className={'weather-data border card'}>\n              <img\n                alt={`${description} icon`}\n                className={'icon'}\n                src={iconUrl(icon)}\n              />\n              <h2>{`${cityName}`}</h2>\n              <p>{`${description}`}</p>\n              <p>{`${temperature}`} &deg; Celsisus</p>\n            </section>\n            <section className={'add-weather-layer border card'}>\n              <h2>Add layers</h2>\n              <div className={'layers-wrapper'}>\n                <section className={'checkbox-group'}>\n                  <Checkbox\n                    label={'temperature layer'}\n                    value={'temp_new'}\n                    onClick={this.onCheckboxClick}\n                    isChecked={this.isChecked('temp_new')}\n                  />\n                  <Checkbox\n                    label={'precipitation layer'}\n                    value={'precipitation_new'}\n                    onClick={this.onCheckboxClick}\n                    isChecked={this.isChecked('precipitation_new')}\n                  />\n                  <Checkbox\n                    label={'wind speed'}\n                    value={'wind_new'}\n                    onClick={this.onCheckboxClick}\n                    isChecked={this.isChecked('wind_new')}\n                  />\n                </section>\n                <section className={'checkbox-group'}>\n                  <Checkbox\n                    label={'Sea level pressure'}\n                    value={'pressure_new'}\n                    onClick={this.onCheckboxClick}\n                    isChecked={this.isChecked('pressure_new')}\n                  />\n                  <Checkbox\n                    label={'clouds layer'}\n                    value={'clouds_new'}\n                    onClick={this.onCheckboxClick}\n                    isChecked={this.isChecked('clouds_new')}\n                  />\n                </section>\n              </div>\n            </section>\n            <section className={'card border input-container'}>\n              <div className={'input-user'}>\n                <span className=\"spanInput\">country:</span>\n                <input\n                  value={this.state.inputUserCountry}\n                  onChange={this.onChangeCountry}\n                  className=\"input\"\n                  id={'countryInput'}\n                />\n                <span className=\"spanInput\">city:</span>\n                <input\n                  value={this.state.inputUserCity}\n                  required={true}\n                  onChange={this.onChangeCity}\n                  className=\"input\"\n                  id={'cityInput'}\n                />\n                <button className=\"btn\" onClick={this.searchByPlace}>\n                  Search\n                </button>\n              </div>\n            </section>\n          </section>\n          <div className={'table-container'}>\n            <table className=\"responsive-table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">City name</th>\n                  <th scope=\"col\">Degree</th>\n                  <th scope=\"col\">Icon</th>\n                  <th scope=\"col\">Description</th>\n                  <th scope=\"col\">Humidity</th>\n                  <th scope=\"col\">Pressure</th>\n                  <th scope=\"col\">Wind degree</th>\n                  <th scope=\"col\">Wind speed</th>\n                </tr>\n              </thead>\n              <tbody>{rowTables}</tbody>\n            </table>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst Checkbox = ({ isChecked, onClick, value, label }) => (\n  <span>\n    <input\n      onClick={onClick}\n      type=\"checkbox\"\n      value={value}\n      checked={isChecked}\n    />{' '}\n    {label}\n  </span>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}